/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.gradle.disco

import org.gradle.jvm.toolchain.JavaLanguageVersion
import org.gradle.jvm.toolchain.JvmImplementation.J9
import org.gradle.jvm.toolchain.JvmImplementation.VENDOR_SPECIFIC
import org.gradle.jvm.toolchain.JvmVendorSpec
import org.gradle.jvm.toolchain.JvmVendorSpec.*
import org.gradle.jvm.toolchain.internal.DefaultJvmVendorSpec.any
import org.gradle.platform.Architecture
import org.gradle.platform.Architecture.*
import org.gradle.platform.OperatingSystem
import org.gradle.platform.OperatingSystem.*
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlin.test.assertNull

class DiscoApiTest {

    private val api = DiscoApi()

    @Test
    fun `download URI provided correctly`() {
        assertDownloadUri(
            "https://api.foojay.io/disco/v3.0/ids/d2d9577fa2947da5c443e02633622104/redirect",
            11, ADOPTIUM, false, MAC_OS, AARCH64
        ) // OpenJDK11U-jdk_aarch64_mac_hotspot_11.0.16.1_1.tar.gz

        assertDownloadUri(
            "https://api.foojay.io/disco/v3.0/ids/ab6e7111c1a2cd7bf06de9be70ea0304/redirect",
            16, any(), true, LINUX, AMD64
        ) // ibm-semeru-open-jdk_x64_linux_16.0.2_7_openj9-0.27.0.tar.gz

        //todo: add more test cases
    }

    @Test
    fun `J9 implementation influences vendor resolution`() {
        assertEquals("Semeru", api.match(any(), J9)?.name)

        assertEquals("AOJ OpenJ9", api.match(ADOPTOPENJDK, J9)?.name)
        assertEquals("Semeru", api.match(IBM_SEMERU, J9)?.name)

        assertNull(api.match(ADOPTIUM, J9)?.name)
        assertNull(api.match(AZUL, J9)?.name)
        assertNull(api.match(AMAZON, J9)?.name)
        assertNull(api.match(BELLSOFT, J9)?.name)
        assertNull(api.match(MICROSOFT, J9)?.name)
        assertNull(api.match(ORACLE, J9)?.name)
        assertNull(api.match(SAP, J9)?.name)

        assertNull(api.match(APPLE, J9)?.name)
        assertNull(api.match(GRAAL_VM, J9)?.name)
        assertNull(api.match(HEWLETT_PACKARD, J9)?.name)
        assertNull(api.match(IBM, J9)?.name)
    }

    @Test
    fun `vendor specific implementation does not influences vendor resolution`() {
        assertEquals("Temurin", api.match(any(), VENDOR_SPECIFIC)?.name)

        assertEquals("AOJ", api.match(ADOPTOPENJDK, VENDOR_SPECIFIC)?.name)
        assertEquals("Semeru", api.match(IBM_SEMERU, VENDOR_SPECIFIC)?.name)

        assertEquals("Temurin", api.match(ADOPTIUM, VENDOR_SPECIFIC)?.name)
        assertEquals("Zulu", api.match(AZUL, VENDOR_SPECIFIC)?.name)
        assertEquals("Corretto", api.match(AMAZON, VENDOR_SPECIFIC)?.name)
        assertEquals("Liberica", api.match(BELLSOFT, VENDOR_SPECIFIC)?.name)
        assertEquals("Microsoft", api.match(MICROSOFT, VENDOR_SPECIFIC)?.name)
        assertEquals("Oracle", api.match(ORACLE, VENDOR_SPECIFIC)?.name)
        assertEquals("SAP Machine", api.match(SAP, VENDOR_SPECIFIC)?.name)

        assertNull(api.match(APPLE, VENDOR_SPECIFIC)?.name)
        assertNull(api.match(GRAAL_VM, VENDOR_SPECIFIC)?.name)
        assertNull(api.match(HEWLETT_PACKARD, VENDOR_SPECIFIC)?.name)
        assertNull(api.match(IBM, VENDOR_SPECIFIC)?.name)
    }

    @Test
    fun `can resolve arbitrary vendors`() {
        assertEquals("ZuluPrime", api.match(vendorSpec("zuluprime"), VENDOR_SPECIFIC)?.name)
        assertEquals("ZuluPrime", api.match(vendorSpec("zUluprIme"), VENDOR_SPECIFIC)?.name)
    }

    @Test
    fun `can match GraalVM`() {
        assertEquals("Graal VM CE 8", api.match(vendorSpec("GraalVMCE8"), VENDOR_SPECIFIC)?.name)
        assertEquals("Graal VM CE 11", api.match(vendorSpec("GraalVMCE11"), VENDOR_SPECIFIC)?.name)
    }

    @Test
    fun `can pick the right package`() {
        val p = api.match("Temurin", JavaLanguageVersion.of(11), LINUX, AMD64)
        assertNotNull(p)
        assertEquals("tar.gz", p.archive_type)
        assertEquals("temurin", p.distribution)
        assertEquals(11, p.major_version)
        assertEquals("linux", p.operating_system)
        assertEquals("x64", p.architecture)
        assertEquals("jdk", p.package_type)
    }

    private fun assertDownloadUri(
        expected: String,
        javaVersion: Int,
        vendor: JvmVendorSpec,
        isJ9: Boolean,
        os: OperatingSystem,
        arch: Architecture
    ) {
        val uri = api.toUri(
            JavaLanguageVersion.of(javaVersion),
            vendor,
            if (isJ9) J9 else VENDOR_SPECIFIC,
            os,
            arch
        )
        assertEquals(expected, uri.toString())
    }

    private fun vendorSpec(vendorName: String): JvmVendorSpec = matching(vendorName)

}
